#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler, ConversationHandler
import requests
import json
from PIL import Image
from io import BytesIO
import folium
import database

# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º config.py
try:
    from dotenv import load_dotenv
    load_dotenv()
    TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TOKEN_HERE")
    OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY", "YOUR_OPENWEATHER_API_KEY")
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ API)
    eco_data = {
        "–ê–ª–º–∞—Ç—ã": {
            "air_quality": "–°—Ä–µ–¥–Ω–∏–π",
            "pm25": 42,
            "temperature": 22,
            "humidity": 45,
            "lat": 43.238949,
            "lon": 76.889709,
            "tips": [
                "–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –¥–æ–º–∞"
            ]
        },
        "–ù—É—Ä-–°—É–ª—Ç–∞–Ω": {
            "air_quality": "–•–æ—Ä–æ—à–∏–π",
            "pm25": 15,
            "temperature": 18,
            "humidity": 30,
            "lat": 51.169392,
            "lon": 71.449074,
            "tips": [
                "–ü–æ–≥–æ–¥–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫"
            ]
        },
        "–®—ã–º–∫–µ–Ω—Ç": {
            "air_quality": "–ü–ª–æ—Ö–æ–π",
            "pm25": 87,
            "temperature": 25,
            "humidity": 20,
            "lat": 42.315514,
            "lon": 69.586907,
            "tips": [
                "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —É–ª–∏—Ü–µ",
                "–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"
            ]
        }
    }
    
    # –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    eco_events = [
        {
            "name": "–û—á–∏—Å—Ç–∫–∞ –±–µ—Ä–µ–≥–∞ —Ä–µ–∫–∏ –ò–ª–∏",
            "date": "15 –∏—é–Ω—è 2025",
            "location": "–†–µ–∫–∞ –ò–ª–∏, 25 –∫–º –æ—Ç –ê–ª–º–∞—Ç—ã",
            "description": "–°–±–æ—Ä –º—É—Å–æ—Ä–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–±—Ä–µ–∂–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"
        },
        {
            "name": "–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –ø–∞—Ä–∫–µ",
            "date": "22 –∏—é–Ω—è 2025",
            "location": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫, –ù—É—Ä-–°—É–ª—Ç–∞–Ω",
            "description": "–ü–æ—Å–∞–¥–∫–∞ 100 —Å–∞–∂–µ–Ω—Ü–µ–≤ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–æ–≤"
        },
        {
            "name": "–°–±–æ—Ä —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞",
            "date": "10 –∏—é–Ω—è 2025",
            "location": "–î–≤–æ—Ä —à–∫–æ–ª—ã ‚Ññ24, –®—ã–º–∫–µ–Ω—Ç",
            "description": "–û–±—É—á–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–º—É —Å–±–æ—Ä—É –º—É—Å–æ—Ä–∞"
        }
    ]
    
    # –≠–∫–æ-—Å–æ–≤–µ—Ç—ã
    tips = [
        "<b>üå± –°–æ–∫—Ä–∞—â–∞–π—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–ª–∞—Å—Ç–∏–∫–∞</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏ –∏ —Å—É–º–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫.",
        
        "<b>‚ôªÔ∏è –°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º—É—Å–æ—Ä</b>\n–î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ —É—Å–∏–ª–∏—è –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é –æ—Ç—Ö–æ–¥–æ–≤ –Ω–∞ —Å–≤–∞–ª–∫–∞—Ö.",
        
        "<b>üíß –≠–∫–æ–Ω–æ–º—å—Ç–µ –≤–æ–¥—É</b>\n–ó–∞–∫—Ä—ã–≤–∞–π—Ç–µ –∫—Ä–∞–Ω, –∫–æ–≥–¥–∞ —á–∏—Å—Ç–∏—Ç–µ –∑—É–±—ã, –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –¥—É—à –≤–º–µ—Å—Ç–æ –≤–∞–Ω–Ω—ã.",
        
        "<b>üîå –≠–∫–æ–Ω–æ–º—å—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é</b>\n–í—ã–∫–ª—é—á–∞–π—Ç–µ —Å–≤–µ—Ç –∏ –ø—Ä–∏–±–æ—Ä—ã, –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.",
        
        "<b>üö∂ –•–æ–¥–∏—Ç–µ –ø–µ—à–∫–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥</b>\n–≠—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —ç–∫–æ–ª–æ–≥–∏–∏, –Ω–æ –∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è."
    ]
except:
    # –ï—Å–ª–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º config.py
    import config
    TOKEN = config.TELEGRAM_TOKEN
    OPENWEATHER_API_KEY = config.OPENWEATHER_API_KEY
    eco_data = config.ECO_DATA
    eco_events = config.ECO_EVENTS
    tips = config.ECO_TIPS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
PHOTO, DESCRIPTION, LOCATION = range(3)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("üìä –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton("üì∏ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
        [KeyboardButton("üåø –≠–∫–æ-—Å–æ–≤–µ—Ç—ã")],
        [KeyboardButton("üìÖ –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
        [KeyboardButton("üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    user = update.effective_user
    update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoMap KZ - –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ.\n\n"
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
        reply_markup=reply_markup
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = database.get_user_stats(user.id)
    if user_stats:
        reports_count = user_stats["reports_count"]
        if reports_count > 0:
            update.message.reply_text(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {reports_count} –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
            )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º EcoMap KZ:\n\n"
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/eco - —É–∑–Ω–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/report - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n"
        "/tips - –ø–æ–ª—É—á–∏—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã\n"
        "/events - —É–∑–Ω–∞—Ç—å –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n"
        "/my_reports - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def eco_info(update: Update, context: CallbackContext) -> None:
    keyboard = []
    for city in eco_data.keys():
        keyboard.append([InlineKeyboardButton(city, callback_data=f"city_{city}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
def city_info(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    city = query.data.replace("city_", "")
    data = eco_data.get(city)
    
    if not data:
        query.edit_message_text(text=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –¶–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
    air_quality = data["air_quality"]
    if air_quality == "–•–æ—Ä–æ—à–∏–π":
        air_indicator = "üü¢"
    elif air_quality == "–°—Ä–µ–¥–Ω–∏–π":
        air_indicator = "üü°"
    else:
        air_indicator = "üî¥"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üìç <b>{city}</b>\n\n"
        f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {air_indicator} {air_quality}\n"
        f"PM2.5: {data['pm25']} –º–∫–≥/–º¬≥\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%\n\n"
        f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    )
    
    for tip in data["tips"]:
        message += f"‚Ä¢ {tip}\n"
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"map_{city}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_cities")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
def show_map(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    city = query.data.replace("map_", "")
    data = eco_data.get(city)
    
    if not data:
        query.edit_message_text(text=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    query.edit_message_text(text=f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç—É –¥–ª—è {city}...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    map_center = [data['lat'], data['lon']]
    m = folium.Map(location=map_center, zoom_start=12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
    popup_text = f"""
    <b>{city}</b><br>
    –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {data['air_quality']}<br>
    PM2.5: {data['pm25']} –º–∫–≥/–º¬≥<br>
    –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C<br>
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
    if data['air_quality'] == "–•–æ—Ä–æ—à–∏–π":
        color = "green"
    elif data['air_quality'] == "–°—Ä–µ–¥–Ω–∏–π":
        color = "orange"
    else:
        color = "red"
    
    folium.Marker(
        location=map_center,
        popup=folium.Popup(popup_text, max_width=300),
        icon=folium.Icon(color=color)
    ).add_to(m)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    map_path = f"map_{city.lower()}.html"
    m.save(map_path)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–ø—Ä–∞–≤–∫–∞ HTML-–∫–∞—Ä—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–≤–µ—Ä—Å–∏—é."
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    reports = database.get_all_reports()
    city_reports = [r for r in reports if city.lower() in r.get("location", "").lower()]
    
    if city_reports:
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–í –≥–æ—Ä–æ–¥–µ {city} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–∏–ª–∏ –æ {len(city_reports)} —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö."
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ
    city_info(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
def back_to_cities(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    keyboard = []
    for city in eco_data.keys():
        keyboard.append([InlineKeyboardButton(city, callback_data=f"city_{city}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ
def report_problem(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [KeyboardButton("üóëÔ∏è –ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Å–≤–∞–ª–∫–∞")],
        [KeyboardButton("üíß –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–¥—ã")],
        [KeyboardButton("üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã")],
        [KeyboardButton("üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã, –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å:",
        reply_markup=reply_markup
    )
    
    return PHOTO

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ
def handle_problem_type(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    
    if text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(update, context)
        return ConversationHandler.END
    
    if text in ["üóëÔ∏è –ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Å–≤–∞–ª–∫–∞", "üíß –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–¥—ã", "üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ"]:
        problem_type = text.split(" ", 1)[1]
        context.user_data['problem_type'] = problem_type
        
        update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—É: {problem_type}.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–±–ª–µ–º—ã. "
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
        )
        return DESCRIPTION
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return PHOTO

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–∏—Å–∞–Ω–∏—è
def handle_photo(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    photo_file = update.message.photo[-1].get_file()
    photo_id = update.message.photo[-1].file_id
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    context.user_data['photo_id'] = photo_id
    
    update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é! –¢–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."
    )
    
    return LOCATION

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
def skip_photo(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º."
    )
    
    return LOCATION

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
def handle_description(update: Update, context: CallbackContext) -> int:
    description = update.message.text
    context.user_data['description'] = description
    
    update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é Telegram."
    )
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
def handle_location(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    
    if update.message.location:
        location = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {update.message.location.latitude}, {update.message.location.longitude}"
    else:
        location = update.message.text
    
    context.user_data['location'] = location
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    problem_type = context.user_data.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    description = context.user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    photo_id = context.user_data.get('photo_id')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    report_id = database.add_report(
        user_id=user.id,
        username=user.username or user.first_name,
        problem_type=problem_type,
        description=description,
        location=location,
        photo_id=photo_id
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
    update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç—á–µ—Ç! –ï–º—É –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä: {report_id}\n\n"
        f"–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {problem_type}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n\n"
        f"–í–∞—à –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏."
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    start(update, context)
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç—á–µ—Ç–∞
def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    start(update, context)
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫–æ-—Å–æ–≤–µ—Ç–æ–≤
def eco_tips(update: Update, context: CallbackContext) -> None:
    tip_index = 0
    if context.user_data and 'tip_index' in context.user_data:
        tip_index = (context.user_data['tip_index'] + 1) % len(tips)
    context.user_data['tip_index'] = tip_index
    
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Å–æ–≤–µ—Ç ¬ª", callback_data="next_tip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"–°–æ–≤–µ—Ç –¥–Ω—è:\n\n{tips[tip_index]}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞
def next_tip(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    tip_index = 0
    if context.user_data and 'tip_index' in context.user_data:
        tip_index = (context.user_data['tip_index'] + 1) % len(tips)
    context.user_data['tip_index'] = tip_index
    
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Å–æ–≤–µ—Ç ¬ª", callback_data="next_tip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=f"–°–æ–≤–µ—Ç –¥–Ω—è:\n\n{tips[tip_index]}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
def show_events(update: Update, context: CallbackContext) -> None:
    if not eco_events:
        update.message.reply_text("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    
    message = "<b>üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
    
    for i, event in enumerate(eco_events):
        message += (
            f"<b>{event['name']}</b>\n"
            f"üìÜ {event['date']}\n"
            f"üìç {event['location']}\n"
            f"‚ÑπÔ∏è {event['description']}\n\n"
        )
    
    keyboard = [
        [InlineKeyboardButton("–Ø —Ö–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!", callback_data="join_event")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
def join_event(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é! –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
             "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –∏–ª–∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.",
        parse_mode=ParseMode.HTML
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
def my_reports(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    reports = database.get_user_reports(user.id)
    
    if not reports:
        update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üì∏ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ'."
        )
        return
    
    message = "<b>üìã –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö:</b>\n\n"
    
    for report in reports:
        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        if report["status"] == "new":
            status_icon = "üÜï"
            status_text = "–ù–æ–≤—ã–π"
        elif report["status"] == "in-progress":
            status_icon = "‚è≥"
            status_text = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        else:  # resolved
            status_icon = "‚úÖ"
            status_text = "–†–µ—à–µ–Ω–æ"
        
        message += (
            f"<b>–û—Ç—á–µ—Ç #{report['id']}</b> {status_icon}\n"
            f"–¢–∏–ø: {report['problem_type']}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–î–∞—Ç–∞: {report['timestamp'].split('T')[0]}\n\n"
        )
    
    update.message.reply_text(
        message,
        parse_mode=ParseMode.HTML
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    
    if text == "üìä –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        eco_info(update, context)
    elif text == "üì∏ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
        report_problem(update, context)
    elif text == "üåø –≠–∫–æ-—Å–æ–≤–µ—Ç—ã":
        eco_tips(update, context)
    elif text == "üìÖ –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        show_events(update, context)
    elif text == "üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã":
        my_reports(update, context)
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(update, context)
    else:
        update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(TOKEN)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    report_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("report", report_problem),
            MessageHandler(Filters.regex("^üì∏ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ$"), report_problem)
        ],
        states={
            PHOTO: [MessageHandler(Filters.regex("^(üóëÔ∏è –ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Å–≤–∞–ª–∫–∞|üíß –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–¥—ã|üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã|üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ|üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"), handle_problem_type)],
            DESCRIPTION: [
                MessageHandler(Filters.photo, handle_photo),
                CommandHandler("skip", skip_photo)
            ],
            LOCATION: [MessageHandler(Filters.text & ~Filters.command, handle_description)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(Filters.regex("^üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), cancel)
        ]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    dispatcher.add_handler(report_conv_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("eco", eco_info))
    dispatcher.add_handler(CommandHandler("tips", eco_tips))
    dispatcher.add_handler(CommandHandler("events", show_events))
    dispatcher.add_handler(CommandHandler("my_reports", my_reports))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dispatcher.add_handler(CallbackQueryHandler(city_info, pattern=r"^city_"))
    dispatcher.add_handler(CallbackQueryHandler(show_map, pattern=r"^map_"))
    dispatcher.add_handler(CallbackQueryHandler(back_to_cities, pattern=r"^back_to_cities"))
    dispatcher.add_handler(CallbackQueryHandler(next_tip, pattern=r"^next_tip"))
    dispatcher.add_handler(CallbackQueryHandler(join_event, pattern=r"^join_event"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    dispatcher.add_handler(MessageHandler(Filters.location, handle_location))
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    print(f"EcoMap KZ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"–û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —á–µ—Ä–µ–∑ @BotFather")
    print(f"–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://t.me/[–≤–∞—à_–±–æ—Ç]")
    print(f"–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 