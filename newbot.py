import asyncio
import os
from dotenv import load_dotenv
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN', '7543391406:AAGdZn8Pk0o95MtVlPiZHKz-efkwQPF4aEc')

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å EcoMap KZ üó∫Ô∏è")]
    ],
    resize_keyboard=True
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class ReportStates(StatesGroup):
    location = State()
    description = State()
    photo = State()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! –Ø –±–æ—Ç —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. "
        f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö —Å—Ç—Ä–∞–Ω—ã.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–µ:",
        reply_markup=reply_kb
    )

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/map - –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É\n"
        "/report - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"
    )
    await message.answer(help_text)

@dp.message_handler(lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—å EcoMap KZ üó∫Ô∏è")
async def open_ecomap(message: types.Message):
    url = "https://ecomap-kz-bot.vercel.app"
    text = "üåç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ üåç"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å EcoMap KZ üó∫Ô∏è", web_app=WebAppInfo(url=url)))
    await message.answer(text, reply_markup=keyboard)

@dp.message_handler(commands=['map'])
async def map_command(message: types.Message):
    url = "https://ecomap-kz-bot.vercel.app"
    text = "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=url)))
    await message.answer(text, reply_markup=keyboard)

@dp.message_handler(commands=['info'])
async def info_command(message: types.Message):
    info_text = (
        "EcoMap KZ - –ø—Ä–æ–µ–∫—Ç —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.\n\n"
        "–ù–∞—à–∞ —Ü–µ–ª—å - —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º "
        "–∏ –ø–æ–º–æ—á—å –≥—Ä–∞–∂–¥–∞–Ω–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é "
        "–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö —Å—Ç—Ä–∞–Ω—ã.\n\n"
        "–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞: https://ecomap-kz-bot.vercel.app/"
    )
    await message.answer(info_text)

@dp.message_handler(commands=['report'])
async def report_start(message: types.Message):
    await ReportStates.location.set()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. "
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' –≤ Telegram "
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞/–≥–æ—Ä–æ–¥–∞."
    )

@dp.message_handler(state=ReportStates.location)
async def location_received(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['location'] = message.text
    
    await ReportStates.description.set()
    await message.answer(
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ '{message.text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. "
        f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É."
    )

@dp.message_handler(state=ReportStates.description)
async def description_received(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    
    await ReportStates.photo.set()
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–±–ª–µ–º—ã, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Å–µ–π—á–∞—Å. –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip."
    )

@dp.message_handler(content_types=['photo'], state=ReportStates.photo)
async def photo_received(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        location = data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        description = data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    photo = message.photo[-1]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å MongoDB
    try:
        from database_mongo import get_database
        db = get_database()
        report_id = db.save_report(
            user_id=message.from_user.id,
            location=location,
            description=description,
            photo_id=photo.file_id
        )
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å ID: {report_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ!\n\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π."
    )
    await state.finish()

@dp.message_handler(commands=['skip'], state=ReportStates.photo)
async def skip_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        location = data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        description = data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å MongoDB
    try:
        from database_mongo import get_database
        db = get_database()
        report_id = db.save_report(
            user_id=message.from_user.id,
            location=location,
            description=description
        )
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å ID: {report_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ!\n\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π."
    )
    await state.finish()

@dp.message_handler(commands=['cancel'], state='*')
async def cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–º–µ–Ω–µ–Ω.")

@dp.message_handler()
async def echo_handler(message: types.Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

def main():
    print("EcoMap KZ Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {TOKEN}")
    
    try:
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == '__main__':
    main() 