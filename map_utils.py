"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ –≥–µ–æ–¥–∞–Ω–Ω—ã–º–∏.
"""

import folium
import tempfile
import os
from PIL import Image
from io import BytesIO
import base64
import requests

def create_eco_map(city_name, lat, lon, air_quality, pm25, temperature, humidity):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É —Å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    
    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        lat (float): –®–∏—Ä–æ—Ç–∞
        lon (float): –î–æ–ª–≥–æ—Ç–∞
        air_quality (str): –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
        pm25 (int): –ó–Ω–∞—á–µ–Ω–∏–µ PM2.5
        temperature (int): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        humidity (int): –í–ª–∞–∂–Ω–æ—Å—Ç—å
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É HTML-—Ñ–∞–π–ª—É –∫–∞—Ä—Ç—ã
    """
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    map_center = [lat, lon]
    m = folium.Map(location=map_center, zoom_start=12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
    popup_text = f"""
    <b>{city_name}</b><br>
    –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {air_quality}<br>
    PM2.5: {pm25} –º–∫–≥/–º¬≥<br>
    –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C<br>
    –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%<br>
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
    if air_quality == "–•–æ—Ä–æ—à–∏–π":
        color = "green"
    elif air_quality == "–°—Ä–µ–¥–Ω–∏–π":
        color = "orange"
    else:
        color = "red"
    
    folium.Marker(
        location=map_center,
        popup=folium.Popup(popup_text, max_width=300),
        icon=folium.Icon(color=color)
    ).add_to(m)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as tmp:
        map_path = tmp.name
        m.save(map_path)
    
    return map_path

def get_air_quality_icon(air_quality):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.
    
    Args:
        air_quality (str): –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
        
    Returns:
        str: Emoji-–∏–∫–æ–Ω–∫–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
    """
    if air_quality == "–•–æ—Ä–æ—à–∏–π":
        return "üü¢"
    elif air_quality == "–°—Ä–µ–¥–Ω–∏–π":
        return "üü°"
    else:
        return "üî¥"

def get_location_coords(location_text):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –≥–µ–æ–∫–æ–¥–µ—Ä—É API.
    
    Args:
        location_text (str): –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        tuple: (lat, lon) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    """
    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if "–ê–ª–º–∞—Ç—ã" in location_text:
        return (43.238949, 76.889709)
    elif "–ù—É—Ä-–°—É–ª—Ç–∞–Ω" in location_text or "–ê—Å—Ç–∞–Ω–∞" in location_text:
        return (51.169392, 71.449074)
    elif "–®—ã–º–∫–µ–Ω—Ç" in location_text:
        return (42.315514, 69.586907)
    elif "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:" in location_text:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        try:
            coords = location_text.replace("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", "").strip().split(",")
            return (float(coords[0]), float(coords[1]))
        except:
            return None
    
    return None

def add_problem_markers_to_map(m, reports):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—É.
    
    Args:
        m (folium.Map): –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã folium
        reports (list): –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        
    Returns:
        folium.Map: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
    """
    for report in reports:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coords = get_location_coords(report.get("location", ""))
        if not coords:
            continue
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        popup_text = f"""
        <b>–ü—Ä–æ–±–ª–µ–º–∞: {report['problem_type']}</b><br>
        –û–ø–∏—Å–∞–Ω–∏–µ: {report['description']}<br>
        –°—Ç–∞—Ç—É—Å: {report['status']}<br>
        """
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
        if "—Å–≤–∞–ª–∫–∞" in report['problem_type'].lower():
            icon = folium.Icon(color="black", icon="trash", prefix='fa')
        elif "–≤–æ–¥–∞" in report['problem_type'].lower():
            icon = folium.Icon(color="blue", icon="tint", prefix='fa')
        elif "–≤—ã–±—Ä–æ—Å" in report['problem_type'].lower():
            icon = folium.Icon(color="purple", icon="industry", prefix='fa')
        elif "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" in report['problem_type'].lower():
            icon = folium.Icon(color="darkred", icon="car", prefix='fa')
        else:
            icon = folium.Icon(color="gray", icon="exclamation-circle", prefix='fa')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
        folium.Marker(
            location=coords,
            popup=folium.Popup(popup_text, max_width=300),
            icon=icon
        ).add_to(m)
    
    return m 