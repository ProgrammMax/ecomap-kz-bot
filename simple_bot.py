import os
import time
import json
import logging
import threading
import requests
from datetime import datetime
from dotenv import load_dotenv
from pymongo import MongoClient

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN', '7543391406:AAGdZn8Pk0o95MtVlPiZHKz-efkwQPF4aEc')

# MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
MONGODB_URI = os.getenv('MONGODB_URI', 'mongodb+srv://ecomapkz:ecomapkzpassword@cluster0.ewtlfwf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
DB_NAME = os.getenv('DB_NAME', 'ecomap_kz')

# Base URL –¥–ª—è Telegram API
BASE_URL = f"https://api.telegram.org/bot{TOKEN}"

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = f"{BASE_URL}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data)
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.json()}")
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def send_app_button(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL —Å Vercel –¥–ª—è Telegram WebApp
    web_app_url = "https://ecomapkz-bot.vercel.app"
    
    inline_keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üåç –û—Ç–∫—Ä—ã—Ç—å EcoMap KZ üåç",
                    "web_app": {"url": web_app_url}
                }
            ]
        ]
    }
    
    return send_message(
        chat_id, 
        "üåø –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ üåø", 
        inline_keyboard
    )

def handle_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    print(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
    
    if "message" in update:
        message = update["message"]
        chat_id = message["chat"]["id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if "text" in message:
            text = message["text"]
            print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if text == "/start":
                print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start")
            
        # –ù–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        send_app_button(chat_id)

def get_updates(offset=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API"""
    url = f"{BASE_URL}/getUpdates"
    params = {"timeout": 30}
    if offset:
        params["offset"] = offset
    try:
        response = requests.get(url, params=params)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {"ok": False, "result": []}

def polling():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ Telegram API"""
    offset = None
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    print(f"EcoMap KZ Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {TOKEN}")
    
    while True:
        try:
            updates = get_updates(offset)
            
            if updates.get("ok") and "result" in updates:
                updates_count = len(updates["result"])
                if updates_count > 0:
                    print(f"–ü–æ–ª—É—á–µ–Ω–æ {updates_count} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                    
                for update in updates["result"]:
                    handle_update(update)
                    offset = update["update_id"] + 1
            
            time.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ä–æ—Å–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ä–æ—Å–∞: {e}")
            time.sleep(5)

def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞"""
    url = f"{BASE_URL}/setWebhook"
    webhook_url = "https://ecomap-kz-bot.vercel.app/api/webhook"
    data = {"url": webhook_url}
    
    try:
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return None

def delete_webhook():
    """–£–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞"""
    url = f"{BASE_URL}/deleteWebhook"
    
    try:
        response = requests.get(url)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return None

if __name__ == "__main__":
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    print("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    delete_result = delete_webhook()
    if delete_result and delete_result.get("ok"):
        print("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å Telegram API
    polling() 